#include <stdio.h>
#include <string.h>
#include <malloc.h>
#include <stdlib.h>
#include <time.h>
#if 0
    #define __ROR1__(x) ((((x)<<7)|((x)>>1))&0xff)
    #define __ROL4__(x) (((x)>>31)|((x)<<1))
#else
    unsigned int __fastcall __ROL4__(int ecx)
    {
        asm volatile
        (
                    "rol %ecx\n"
                    "mov %ecx,%eax"
        );
    }
    unsigned char __fastcall __ROR1__(unsigned char ecx)
    {
        asm volatile
        (
                    "ror %cl\n"
                    "mov %cl,%al"
        );
    }
#endif
unsigned char byte_103E6018[32]=
{
    50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90
};
unsigned char byte_103E5FD8[64]=
{
39, 29, 210, 57, 240, 147, 43, 209, 142, 78, 99, 180, 135, 154, 170, 27, 212, 75, 156, 90, 53, 54, 153, 177, 30, 204, 116, 198, 232, 15, 102, 197, 166, 86, 163, 150, 92, 23, 216, 172, 169, 178, 45, 201, 139, 105, 89, 58, 114, 202, 46, 77, 165, 195, 226, 184, 51, 60, 113, 149, 108, 225, 83, 71
};
unsigned int dword_103E5BD8[256]=
{
    0x0A6E8D2E1,0x536C874E,0x33562B65,0x5C692B4B,0x0D2C3C674,0x3A72E29A,0x7195D459,0x0B8B4E465,0x4E1ED1AA,0x0C9E433B1,0x659A78E2,0x9C6A66CC,0x9AA5E178,0x0ACC9A5A3,0x74C61D72,0x0C91E1DC9,0x0E48EC51E,0x568EA369,0x363565C5,0x9C66CCE1,0x0C58DB295,0x0B24B9571,0x47C95635,0x0A6595C4E,0x535A362B,0x6AB19C99,0x651B9A39,0x0A674D20F,0x8EB2ACE1,0x87367469,0x96C533B1,0x5635D48D,0x4DB26C72,0x5A178D36,0x0CA5571A6,0x3366A569,0x0C64E9A8B,0x3CE8B8A3,0x3A8DA39A,0x66AA47B8,0x8E74F03C,0x0B19CC64D,0x0E835E1F0,0x9AE11D72,0x0E253AA74,0x339A55D1,0x0C969E247,0x565A5666,0x65A9B2AC,0x2E53C35A,0x0E19A3366,0x0CAB427C5,0x4793D239,0x7439E8D2,0x0D8B471CA,0x0F01BD21B,0x87999C71,0x0A53C87A5,0x0C33C8E4E,0x8E0F36A6,0x5C66AAF0,0x354B3578,0x0D2F01E0F,0x7127963A,0x172D552D,0x47D833A9,0x0CAD2AA5A,0x0E44DD14B,0x0C578D272,0x724E6971,0x0E22BC666,0x361EC9E4,0x6AE8E8B2,0x72B1173C,0x783AC336,0x690F9653,0x538B36C6,0x0F03C561E,0x1DA95C5C,0x5AB1A969,0x0C9B4CC3C,0x95B4335A,0x0D86C1E55,0x7865B22D,0x35275A53,0x0B4957869,0x4DAA663A,0x55A52733,0x873A8BE8,0x0C9F0B2C3,0x746A338B,0x0C58D2E93,0x399AD427,0x0E48759E2,0x4ED46C4B,0x6C534B59,0x1BC5CC59,0x0D24B65F0,0x0A6A6B1E8,0x0B22BD18B,0x95D12D2D,0x7135E16C,0x0C51D3627,0x569A744B,0x63C572C3,0x336C2759,0x666C2B95,0x4DF01B1D,0x66C9D8E8,0x0E4CA4E69,0x0AC591ECC,0x8E59B2AA,0x2BF05AE1,0x330F8B4D,0x0A5E1AA99,0x0C669353A,0x0D2B25C71,0x963CE465,0x7453E1A9,0x6999D26A,0x0C5B8B895,0x712ED2CC,0x65391BD2,0x0C53C1D4B,0x4B9359C6,0x0E163A58E,0x780FD4D4,0x66B25355,0x4778D2B2,0x3C9A59C3,0x53334739,0x0D46ACC39,0x2EB89A59,0x0E80F87B2,0x0D165D48E,0x56C58D2B,0x99AA1E35,0x33A92DC5,0x0D199AA6A,0x8D6C9647,0x96A91D4E,0x5C8D9CA6,0x1ECC5365,0x391BA617,0x0A3D8872B,0x63991D65,0x0E2742BC5,0x0C6D1E1E2,0x1D4D3339,0x8B99726C,0x2B33E86A,0x0A33A1D99,0x0A54EC5A6,0x8BC55596,0x0E433D827,0x0D4AC6AD1,0x65A58B65,0x354DE84B,0x0B235B874,0x36F0E293,0x93D8CA99,0x53353559,0x6533655C,0x4D748E4B,0x9A595CD2,0x3655B4AA,0x788DE199,0x0D2559CD2,0x27C62E8B,0x4E17358B,0x95992E95,0x4DD8D4E4,0x0A695CCCC,0x0ACE1A972,0x0F0721D63,0x0B19AB8E1,0x0C68B71C3,0x6CD8745A,0x0CC781E5C,0x0D8C51DB1,0x0E499D465,0x1E72E46A,0x0AA9C9555,0x59C566D8,0x0D49317E1,0x1BB1CA4D,0x33D48E56,0x959A3A36,0x566CA6E2,0x0CC694BB1,0x6966F0D4,0x539C4778,0x8BE4656C,0x0A3E239B2,0x0D1361DD8,0x9C953CD2,0x6C9CD4C6,0x276AD21B,0x0A61ED495,0x2D69471B,0x69AA1D6A,0x0E233B23C,0x0B44D8B72,0x0AAAA0FE2,0x0B4D4728D,0x1E1BD4A9,0x0A617AAB2,0x5CE2AAB2,0x72E8994D,0x478B71B2,0x0B4AAB855,0x0A52DF0B1,0x6C564B3C,0x69531B59,0x0E1363AA9,0x5A3A1B96,0x2DC9E4C5,0x9C5AB88E,0x1DD2A969,0x0E133A9A6,0x7153A91B,0x0B153A578,0x1B35391E,0x17B19A3C,0x0F039C35A,0x0E272365A,0x4DC3273C,0x0F59C92B,0x93A38E1E,0x4E5A6AA3,0x0A9CC33C6,0x0D1C347D8,0x0AA63E41D,0x96B8AA65,0x2B9CE1B8,0x0B82EA69C,0x9553E22D,0x996AE28E,0x78E4AA66,0x6AB874C5,0x8B1ED1C3,0x59A9B236,0x0E136A63C,0x0D28D1B6C,0x17AA6687,0x939AF072,0x65598E3C,0x4E56AA93,0x5A475A3C,0x6C9C654E,0x0D1A6A393,0x3659E1CA,0x17874EC9,0x8EC96A3A,0x0D18EB48E,0x746A552E
};
unsigned int  sub_10183AD0(char* a1, int a2)
{
  int v7;
  int v2 = 0;
  unsigned int v3=0;
  for ( int i = 0; i < a2; v3 = __ROL4__(dword_103E5BD8[v7] ^ v3) )
  {
    unsigned char v5 = v2 ^ a1[i];

    unsigned char v6 = byte_103E5FD8[i++];
    v7 = v6 ^ v5;
    v2 = __ROR1__(v5);
  }
  return v3 & 0xFFFFFF;
}
char *genKey()
{
#define ran32 (rand()%32)
    char *cKey=new char[38];
    strcpy(cKey,"w900105-009100-000000-000000-xxxxxx");
    for (int i=0;i<6;i++)
        cKey[15+i]=byte_103E6018[ran32];
    char *cmKey=new char[38];
    strncpy(cmKey,cKey,7);
    cmKey[7]=0;
    strncat(cmKey,cKey+8,6);
    strncat(cmKey,cKey+15,6);
    strncat(cmKey,cKey+22,6);
    unsigned int v27 = sub_10183AD0(cmKey, 25);
    for (int v29=0;v29<6;v29++)
        {
            cKey[29+v29]=byte_103E6018[v27 & 0x1F];
            v27 >>= 5;
        }
    strncat(cmKey,cKey+29,6);
    v27 = sub_10183AD0(cmKey, 31);
    for (int v29=0;v29<6;v29++)
        {
            cKey[22+v29]=byte_103E6018[v27 & 0x1F];
            v27 >>= 5;
        }
    delete[] cmKey;
    return cKey;
}
//
